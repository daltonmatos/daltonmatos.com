<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Avr C on </title>
    <link>http://1.daltonmatos.com/tags/avr-c/</link>
    <description>Recent content in Avr C on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Sun, 12 Apr 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://1.daltonmatos.com/tags/avr-c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Chamando código Assembly legado (AVRASM2) a partir de um código novo em C (avr-gcc)</title>
      <link>http://1.daltonmatos.com/post/chamando-codigo-assembly-legado-avrasm2-a-partir-de-um-codigo-novo-em-c-avr-gcc/</link>
      <pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://1.daltonmatos.com/post/chamando-codigo-assembly-legado-avrasm2-a-partir-de-um-codigo-novo-em-c-avr-gcc/</guid>
      <description>Contexto Todos os tutoriais que encontrei na internet que falam sobre mistura de C e ASM em um mesmo projeto ensinam a fazer da mesma forma, que é usando avr-gcc. O problema comum em todos eles é que assumem que você está começando um projeto do zero. Isso significa que o código assembly deve estar na sintaxe que o avr-as (GNU Assembler) espera encontrar. Quando me refiro a &amp;ldquo;código legado&amp;rdquo; estou falando de Assembly feito no AVR Studio, usando o AVRASM2 como Assembler.</description>
    </item>
    
  </channel>
</rss>