<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>typehint on </title>
    <link>https://daltonmatos.com/tags/typehint/</link>
    <description>Recent content in typehint on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Sun, 25 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://daltonmatos.com/tags/typehint/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Asyncworker: Recebendo parametros do Path do Request através de typehints</title>
      <link>https://daltonmatos.com/2021/04/asyncworker-recebendo-parametros-do-path-do-request-atraves-de-typehints/</link>
      <pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2021/04/asyncworker-recebendo-parametros-do-path-do-request-atraves-de-typehints/</guid>
      <description>No último post exploramos algumas possibilidades de um handler http receber mais do que Request quando for chamado. Naquele post fizemos uso de um decorator para exemplificar o pasring do body do request.
Nesse post vamos ver o que o asyncworker trouxe de novo para que essa funcionalidade seja mais simples e fácil de usar.
A versão 0.19.1 do asyncworker traz um novo typehint que permite receber parametros do path do request: PathParam[T].</description>
    </item>
    
    <item>
      <title>Asyncworker: Handler HTTP recebendo mais do que Request</title>
      <link>https://daltonmatos.com/2020/01/asyncworker-handler-http-recebendo-mais-do-que-request/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2020/01/asyncworker-handler-http-recebendo-mais-do-que-request/</guid>
      <description>Contexto Uma implementação recente no asyncworker (doc) permitiu que um handler http pudesse receber parâmetros mais complexos do que simplesmente Request, que é o que normalmente um handler http recebe. Essa implementação permite que possíveis valores possam ser acumulados ao longo da execução do código e no momento que o handler for chamado para atender o Request atual, esses valores seriam consultados para saber se o handler está interessado em receber algum deles.</description>
    </item>
    
    <item>
      <title>Chamando funções Python com assinatura dinâmica Baseada em Typehint</title>
      <link>https://daltonmatos.com/2020/01/chamando-funcoes-python-com-assinatura-dinamica-baseada-em-typehint/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2020/01/chamando-funcoes-python-com-assinatura-dinamica-baseada-em-typehint/</guid>
      <description>Contexto Com a possibilidade de declarar tipos em códigos python vem uma possibilidade interessante: Poder deduzir quais parâmetros uma função (ou método) quer receber e fazer essa chamada dinamicamente.
Isso te dá a possibilidade de eventualmente mudar a assinatura de um método e ainda assim não mudar a chamada a esse método, isso porque os parâmetros são &amp;ldquo;resolvidos&amp;rdquo; no momento da chamada e não mais no momento da escrita do código.</description>
    </item>
    
  </channel>
</rss>
