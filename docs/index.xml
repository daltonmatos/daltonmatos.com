<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://daltonmatos.com/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Sat, 04 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://daltonmatos.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Asyncworker: Handler HTTP recebendo mais do que Request</title>
      <link>https://daltonmatos.com/2020/01/asyncworker-handler-http-recebendo-mais-do-que-request/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2020/01/asyncworker-handler-http-recebendo-mais-do-que-request/</guid>
      <description>Contexto Uma implementação recente no asyncworker (doc) permitiu que um handler http pudesse receber parâmetros mais complexos do que simplesmente Request, que é o que normalmente um handler http recebe. Essa implementação permite que possíveis valores possam ser acumulados ao longo da execução do código e no momento que o handler for chamado para atender o Request atual, esses valores seriam consultados para saber se o handler está interessado em receber algum deles.</description>
    </item>
    
    <item>
      <title>Chamando funções Python com assinatura dinâmica Baseada em Typehint</title>
      <link>https://daltonmatos.com/2020/01/chamando-funcoes-python-com-assinatura-dinamica-baseada-em-typehint/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2020/01/chamando-funcoes-python-com-assinatura-dinamica-baseada-em-typehint/</guid>
      <description>Contexto Com a possibilidade de declarar tipos em códigos python vem uma possibilidade interessante: Poder deduzir quais parâmetros uma função (ou método) quer receber e fazer essa chamada dinamicamente.
Isso te dá a possibilidade de eventualmente mudar a assinatura de um método e ainda assim não mudar a chamada a esse método, isso porque os parâmetros são &amp;ldquo;resolvidos&amp;rdquo; no momento da chamada e não mais no momento da escrita do código.</description>
    </item>
    
    <item>
      <title>Guia definitivo sobre como guardo minhas senhas e outras informações sensíveis</title>
      <link>https://daltonmatos.com/2019/11/guia-definitivo-sobre-como-guardo-minhas-senhas-e-outras-informacoes-sensiveis/</link>
      <pubDate>Tue, 05 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2019/11/guia-definitivo-sobre-como-guardo-minhas-senhas-e-outras-informacoes-sensiveis/</guid>
      <description>Introdução Desde que descobri a existência das chaves fabricadas pela Yubico (Token) fiquei interessado em ter uma para usar como Segundo fator de autenticação (MFA), quando descobri que além de segundo fator ela também suportava o uso de chaves GPG fiquei ainda mais curioso para testar um exemplar pessoalmente.
Já escrevi bastante sobre as pesquisas que fiz em relação a isso e esse post é uma tentativa de juntar tudo de uma forma que uma pessoa que acabou de comprar sua chave possa prepará-la para fazer o mesmo uso que eu faço no dia a dia.</description>
    </item>
    
    <item>
      <title>Escrevendo workers assíncronos em python com asyncowrker</title>
      <link>https://daltonmatos.com/2019/03/escrevendo-workers-assincronos-em-python-com-asyncowrker/</link>
      <pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2019/03/escrevendo-workers-assincronos-em-python-com-asyncowrker/</guid>
      <description>Olhando o histórico de commits, o primeiro data de 19/Jan/2017. Essa talvez seja a data oficial do início do que chamamos de asyncworker.
O projeto nasceu para facilitar a escrita de workers assíncronos em python. Inicialmente eram workers para rabbitmq. Mas com o tempo surgiram oportunidades de implementar suporte a outros &amp;ldquo;backends&amp;rdquo;, por assim dizer.
Backends atualmente suportados Até a data de hoje o projeto suporta os seguintes backends:
 RabbitMQ Server Side Events HTTP Tarefas recorrentes  E a ideia é adicionar suporte a mais backends com o tempo.</description>
    </item>
    
    <item>
      <title>Comprei uma yubikey nova, e agora?</title>
      <link>https://daltonmatos.com/2018/12/comprei-uma-yubikey-nova-e-agora/</link>
      <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2018/12/comprei-uma-yubikey-nova-e-agora/</guid>
      <description>Nesse post vou descrever os passos que tenho que percorrer para preparar uma nova Yubikey para uso diário.
Recentemente comprei uma nova chave e chegou a hora de substituir minha chave atual por essa nova.
A chave nova é uma Yubikey 5 NFC, e resolvi trocar por alguns motivos:
 Possui NFC, ou seja, posso usar no celular sem precisar de nenhum tipo de adaptador. Atualmente carrego comigo um adaptador USB-A &amp;gt; USB-C; É a primeira chave da yubico que possui NFC e suporte a chaves GPG de 4096bits; Apesar da chave ser fisicamente um pouco maior ela já possui um furo que permite ser colocada diretamente na argola do meu molho chaves.</description>
    </item>
    
    <item>
      <title>Usando vim como interpretador de código</title>
      <link>https://daltonmatos.com/2018/11/usando-vim-como-interpretador-de-codigo/</link>
      <pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2018/11/usando-vim-como-interpretador-de-codigo/</guid>
      <description>Pra quem traballha com programação, escrever código pode representar grande parte das atividades do dia-a-dia. À medida que o tempo vai passando vamos escrevendo código e nem mais percebendo o que é necessário para rodar esss códigos.
Mas quando paramos para pensar nisso, independente da linguagem que usamos, tudo acontece meio que da mesma forma: O código que escrevemos deve ser interpretado por &amp;ldquo;alguém&amp;rdquo;, seja esse &amp;ldquo;alguém&amp;rdquo; um outro código (um interpretador, por exemplo) ou um hardware (um processador, por exemplo).</description>
    </item>
    
    <item>
      <title>Renovando a data de expiração de suas chaves GPG</title>
      <link>https://daltonmatos.com/2018/10/renovando-a-data-de-expiracao-de-suas-chaves-gpg/</link>
      <pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2018/10/renovando-a-data-de-expiracao-de-suas-chaves-gpg/</guid>
      <description>Escolhi uma data de expiração de 6 meses para minhas chaves GPG. Penso nisso como uma forma de &amp;ldquo;prova de vida&amp;rdquo;, onde a comprovação que eu ainda mantenho o controle da chave privada é o fato de eu poder renovar a data de expiração de cada uma das chaves GPG.
Eis que chegou hora de fazer a primeira renovação (desde que adotei essa ideia de expirar as chaves de tempos em tempos).</description>
    </item>
    
    <item>
      <title>Criando sua keyring GPG de forma fácil</title>
      <link>https://daltonmatos.com/2018/10/criando-sua-keyring-gpg-de-forma-facil/</link>
      <pubDate>Sun, 14 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2018/10/criando-sua-keyring-gpg-de-forma-facil/</guid>
      <description>Nesse texto preparei um forma fácil e semi-automatizada para que você possa criar sua keyring GPG. Em vez de criar tudo usando o prompt interavido do GnuPG vamos usar uma funcionalidade que ele tem e que permite que chaves sejam criadas a partir de arquivos de configuração. É o que ele mesmo chama de Unattended GPG key generation.
Estrutura da keyring O que vamos fazer é criar 3 chaves, um para cada finalidade:</description>
    </item>
    
    <item>
      <title>Múltiplos certificados SSL com Let&#39;s Encrypt e traefik</title>
      <link>https://daltonmatos.com/2018/10/multiplos-certificados-ssl-com-lets-encrypt-e-traefik/</link>
      <pubDate>Mon, 08 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2018/10/multiplos-certificados-ssl-com-lets-encrypt-e-traefik/</guid>
      <description>O que o let&#39;s encrypt trouxe foi a possibilidade de gerar certificados de forma simples, gratuita e automatizada.
Gerar um certificado é tão simples quanto rodar um comando. O única coisa que você precisa ter em me te é como comprovar que você controla o domínio para o qual você está gerando um certificado.
Challenge http-01 Um dos challenges mais comuns é usar um server http para comprovar que você controla o domínio.</description>
    </item>
    
    <item>
      <title>Como armazeno de forma segura meus dados sensíveis de acessos a contas online</title>
      <link>https://daltonmatos.com/2018/10/como-armazeno-de-forma-segura-meus-dados-sensiveis-de-acessos-a-contas-online/</link>
      <pubDate>Thu, 04 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2018/10/como-armazeno-de-forma-segura-meus-dados-sensiveis-de-acessos-a-contas-online/</guid>
      <description>Esse texto é uma descrição geral do modelo de segurança que escolhi usar depois de pesquisar sobre como outras pessoas guardam dados sensíveis de forma segura.
A motivação principal, além de poder ter os dados guardados de forma segura (e aprender muito sobre esse assunto), foi poder ter o total controle sobre eles.
Se você usa um password manager online por exemplo, o mínimo que você deveria fazer seria manter esses dados encriptados.</description>
    </item>
    
    <item>
      <title>Uso da Yubikey no Android</title>
      <link>https://daltonmatos.com/2018/09/uso-da-yubikey-no-android/</link>
      <pubDate>Sat, 29 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2018/09/uso-da-yubikey-no-android/</guid>
      <description>O último ponto que faltava na minha migração para um novo password manager era poder acessar meus dados usando o celular.
Aqui vou mostrar cada um dos apps que uso para poder ter o celular como uma ferramenta completa para poder usar meu smartcard.
Suporte à yubikey Os smartcards da Yubico já são naturalmente suportados pelo Android. Os smartcards que possuem NFC têm suporte ainda melhor, pois basta aproximar o telefone do smartcard para que eles se comuniquem.</description>
    </item>
    
    <item>
      <title>O que acontece se minha Yubikey parar de funcionar?</title>
      <link>https://daltonmatos.com/2018/09/o-que-acontece-se-minha-yubikey-parar-de-funcionar/</link>
      <pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2018/09/o-que-acontece-se-minha-yubikey-parar-de-funcionar/</guid>
      <description>Continuando minha caminhada para montar um modelo de segurança onde consiga guardar meus usuários/senhas de forma segura, surge um ponto bem importante: O que acontece se meu smartcard parar de funcionar de repente?
Vou explicar aqui os procedimentos que seriam necessários para conseguir preparar uma nova Yubikey e voltar ao dia a dia normal.
Cópia da chave que está no smartcard Estou assumindo aqui que existe uma cópia da chave que está no smartcard, ok?</description>
    </item>
    
    <item>
      <title>Multi Factor Authentication na linha de comando</title>
      <link>https://daltonmatos.com/2018/09/multi-factor-authentication-na-linha-de-comando/</link>
      <pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2018/09/multi-factor-authentication-na-linha-de-comando/</guid>
      <description>Acredito que a forma mais comum de MFA atualmente é o uso de &amp;ldquo;Authenticator Apps&amp;rdquo;. Usei por muito tempo o Google Authenticator até que percebi que, se perdesse meu celular, estaria preso pra fora de todas as contas onde tinha MFA configurado.
Quando percebi isso, descobri o Authy, que faz backup dos seus MFAs pra você e pode sincronizar entre múltiplos dispositivos. Isso já é muito bom, pois você não fica totalmente dependente do celular.</description>
    </item>
    
    <item>
      <title>So long LastPass and thank you for all the fish</title>
      <link>https://daltonmatos.com/2018/09/so-long-lastpass-and-thank-you-for-all-the-fish/</link>
      <pubDate>Fri, 14 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2018/09/so-long-lastpass-and-thank-you-for-all-the-fish/</guid>
      <description>Desde que pude guardar minha chave GPG de forma segura em um token físico, passei a pensar em como voltar a ter controle sobre minhas informações já que agora posso guardá-las encriptadas com essa chave.
Os primeiros dados que comecei a encriptar foram documentos sensíveis que guardo de backup, como comprovantes, documentos pessoais e afins.
O segundo passo foi fazer algo em relação ao password manager. Uso o LastPass já há muito tempo e sempre funcionou muito bem, cumpriu seu propósito.</description>
    </item>
    
    <item>
      <title>Modelos de segurança para uso de smartcards</title>
      <link>https://daltonmatos.com/2018/09/modelos-de-seguranca-para-uso-de-smartcards/</link>
      <pubDate>Thu, 06 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2018/09/modelos-de-seguranca-para-uso-de-smartcards/</guid>
      <description>Desde que descobri a existência de smartcards que podem ser usados como segundo fator de autenticação, fiquei curioso em como seria usar um dispositivo desses no dia a dia.
Minha curiosidade era mais no sentido de quanta &amp;ldquo;burocracia&amp;rdquo; um dispositivo desse poderia inserir no meu dia de trabalho.
Na época eu já queria um desses pelo simples fato de ser um token físico, mas pensando bem usar o celular com algum App de TOTP seria bem semelhante, talvez até &amp;ldquo;melhor&amp;rdquo; já que o App do celular pode exigir uma senha antes de abrir e no caso do token físico, não tem senha nenhuma, basta inserir na porta USB e tocar com o dedo.</description>
    </item>
    
    <item>
      <title>Compilando polybar no Arch Linux</title>
      <link>https://daltonmatos.com/2018/08/compilando-polybar-no-arch-linux/</link>
      <pubDate>Fri, 31 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2018/08/compilando-polybar-no-arch-linux/</guid>
      <description>Polybar é uma (de várias) possíveis implementações de statusbar para gerenciadores de janelas para o projeto X.org (ou apenas X, xorg-server, Xorg).
Window manager (ou apenas WM) é basicamente a parte responsável por &amp;ldquo;falar&amp;rdquo; com o xorg-server e desenhar as janelas dos programas que você abre. O WM faz também muitas outras coisas, mas para o que vamos ver aqui saber isso basta.
Todas as opções de interface gráfica que hoje existem para o Xorg possuem um Window Manager.</description>
    </item>
    
    <item>
      <title>SSH de Guerrilha</title>
      <link>https://daltonmatos.com/2018/08/ssh-de-guerrilha/</link>
      <pubDate>Sun, 26 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2018/08/ssh-de-guerrilha/</guid>
      <description>Boa parte do meu dia envolve usar ssh. Às vezes como comando direto para fazer acesso remoto a algum servidor e às vezes como ferramenta para poder executar alguma outra tarefa.
Nesse texto vamos ver os usos mais comuns que faço desse comando e algumas configurações que fui acumulando ao longo do tempo.
SSH Config O primeiro ponto que temos que ter bastante atenção é o arquivo de configuração. Muita gente acha que apenas o ssh-server possui um config, mas isso não é verdade.</description>
    </item>
    
    <item>
      <title>GPG public key</title>
      <link>https://daltonmatos.com/gpg/</link>
      <pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/gpg/</guid>
      <description>Aqui você poderá encontrar uma cópia da minha chave pública GPG. Essa chave sempre terá todas as identidades pelas quais respondo: Minha identidade pessoal e a identidade de qualquer empregadores que eu estiver trabalhando no momento.
Minhas chaves de assinatura e encriptação expiram a cada 6 meses. Isso forçará todas as pessoas que possuem minha chave a terem sempre uma chave atualizada, pois sempre que a data de expiração chegar precisarão voltar aqui e pegar a mesma chave atualizada, ou seja, com o prazo de expiração estendido.</description>
    </item>
    
    <item>
      <title>Mantendo variáveis de ambiente encriptadas</title>
      <link>https://daltonmatos.com/2018/08/mantendo-variaveis-de-ambiente-encriptadas/</link>
      <pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2018/08/mantendo-variaveis-de-ambiente-encriptadas/</guid>
      <description>Desde que me interessei mais sobre encriptação, chaves GPG e afins comecei a tentar montar um workflow que fosse ao mesmo tempo agradável e seguro (para os padrões que escolhi). Depois de ter começado a usar um smartcard para armazenar minhas chaves ([1] e [2]) comecei a usá-lo em vários pontos do meu dia a dia que achei que deveriam/poderiam ser mais seguros.
Variáveis de ambiente Variáveis de ambiente, ou apenas ENVs são muito comuns no dia a dia de quem lida com desenvolvimento.</description>
    </item>
    
    <item>
      <title>Usando seu keyring GPG para guardar sua chave SSH</title>
      <link>https://daltonmatos.com/2018/08/usando-seu-keyring-gpg-para-guardar-sua-chave-ssh/</link>
      <pubDate>Sun, 12 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2018/08/usando-seu-keyring-gpg-para-guardar-sua-chave-ssh/</guid>
      <description>Por muito tempo tive minha chave privada SSH gravada dentro da minha ${HOME}, geralmente em .ssh/id_rsa. Algum tempo atrás descobri que o GnuPG permite criar chaves com &amp;ldquo;propriedades&amp;rdquo; específicas, por exemplo, Encriptação, Assinatura, etc.
O que vamos usar aqui é a propriedade de Autenticação. Para criar essa chave, vamos adicionar uma nova subchave à nossa keyring GPG.
Estou assumindo aqui que você já possui uma keyring e que já tem uma chave GPG criada.</description>
    </item>
    
    <item>
      <title>Curl de Guerrilha</title>
      <link>https://daltonmatos.com/2018/08/curl-de-guerrilha/</link>
      <pubDate>Sat, 04 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2018/08/curl-de-guerrilha/</guid>
      <description>Vou escrever aqui algumas das opções que mais uso no dia a dia quando preciso do comando curl. Muitas vezes o curl é usado apenas para &amp;ldquo;baixar arquivos&amp;rdquo; e pelo fato dele usar por padrão o stdout muitas vezes as pessoas preferem até mesmo usar o wget, que por padrão salva o output em um arquivo.
O curl é muito mais do que um &amp;ldquo;baixador de arquivos&amp;rdquo; e diria até que o propósito principal dele nem é esse, apesar dele conseguir fazer isso também.</description>
    </item>
    
    <item>
      <title>(Arch) Linux Com Full Disk Encryption</title>
      <link>https://daltonmatos.com/2018/08/arch-linux-com-full-disk-encryption/</link>
      <pubDate>Thu, 02 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2018/08/arch-linux-com-full-disk-encryption/</guid>
      <description>Atualmente é tão simples e transparente ter o disco encriptado que não faz sentido não ter. Se você pensar na possível perda de performance (pelo fato do seu disco estar sendo encriptado/decriptado em tempo de execução) vai perceber que, a não ser que você faça um uso muito específico do seu PC, essa &amp;ldquo;perda de performance&amp;rdquo; não fará nenhuma diferença.
Sempre que me perguntam se a performance de um disco encriptado é boa ou ruim, eu respondo que não sei pois nunca tive um laptop onde o disco não estava encriptado.</description>
    </item>
    
    <item>
      <title>Preparando uma Yubikey 4 Nano para uso diário</title>
      <link>https://daltonmatos.com/2018/07/preparando-uma-yubikey-4-nano-para-uso-diario/</link>
      <pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2018/07/preparando-uma-yubikey-4-nano-para-uso-diario/</guid>
      <description>Até saber da existência de smartcards, eu carregava minha chave RSA no meu computador pessoal e tinha uma chave para cada computador que eu usava, basicamene uma chave no trabalho e uma chave em casa.
Meu primeiro interesse em smartcards nem foi para usar como storage para chaves criptográficas e sim para fazer Multi-Factor Autentication. Nesse caso o primeiro fator é algo que eu &amp;ldquo;sei&amp;rdquo; (minha senha) e o segundo fator é algo que eu &amp;ldquo;tenho&amp;rdquo;, ou seja, o smartcard.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://daltonmatos.com/about/</link>
      <pubDate>Mon, 14 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/about/</guid>
      <description>Quem sou Olá! Me chamo Dalton Barreto e esse é meu site/blog. Aqui você encontrará conteúdos que escrevo sobre diversos assuntos de meu interesse, dentre eles desenvolvimento de software, eletrônica (circuitos analógicos/digitais), micro controladores (principalmente AVR), Servidores, Linux, Python e mais.
As visões apresentadas aqui são minhas e somente minhas, não refletindo a opnião de terceiros ou de quaisquer empregadores.
O textos plublicados aqui têm mais a intenção de serem lembretes do que tutoriais completos sobre quaisquer assuntos.</description>
    </item>
    
    <item>
      <title>Palestras</title>
      <link>https://daltonmatos.com/talks/</link>
      <pubDate>Mon, 14 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/talks/</guid>
      <description>Aqui você encontra uma lista de apresentações que fiz por aí sobre projetos e/ou assuntos que achei interessante falar sobre.
Asgard: Abstraindo orquestradores de containers Python Brasil 14, Natal. 19/10/2018
O projeto Asgard é um projeto que tem como objetivo abstrair múltiplos aroquestradores de containers. A ideia é que o time de desenvolvimento não precise sem saber o que está rodando as aplpicações por baixo dos panos. Basta que alguém crie uma Aplicação e clique em &amp;ldquo;Salvar&amp;rdquo; e essa aplicação vai ganhar um IP e Porta.</description>
    </item>
    
    <item>
      <title>Lidando com dados gravados na memória flash, EEPROM e SRAM</title>
      <link>https://daltonmatos.com/2015/09/lidando-com-dados-gravados-na-memoria-flash-eeprom-e-sram/</link>
      <pubDate>Sun, 27 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2015/09/lidando-com-dados-gravados-na-memoria-flash-eeprom-e-sram/</guid>
      <description>Esse post faz parte de uma série de posts sobre mistura de código C (avr-gcc) com código Assembly (avrasm2). Se você ainda não leu os posts anteriores, recomendo que leia antes de prosseguir.
Contexto Até agora, nos posts anteriores vimos apenas como fazer chamadas de função de uma linguagem para outra, mas uma parte muito importante de qualquer projeto com micro-controladores é a possibilidade de gravar dados na área de memória do chip (memória flash, por exemplo).</description>
    </item>
    
    <item>
      <title>Chamando código novo C (avr-gcc) a partir de código legado Assembly (avrasm2)</title>
      <link>https://daltonmatos.com/2015/07/chamando-codigo-novo-c-avr-gcc-a-partir-de-codigo-legado-assembly-avrasm2/</link>
      <pubDate>Thu, 30 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2015/07/chamando-codigo-novo-c-avr-gcc-a-partir-de-codigo-legado-assembly-avrasm2/</guid>
      <description>Esse post faz parte de uma série de posts sobre mistura de código C (avr-gcc) com código Assembly (avrasm2). Se você ainda não leu os posts anteriores, recomendo que leia antes de prosseguir.
Contexto Uma parte muito importante quando estamos trabalhando com projetos de código misto, nesse caso C e Assembly, é poder chamar livremente códigos das duas linguagens. Temos que poder chamar uma rotina Assemlty a partir do C e temos também que poder chamar código C a partir do Assembly.</description>
    </item>
    
    <item>
      <title>Convertendo Intel HEX para ELF32-avr criando tabela de símbolos e tabela de realocação</title>
      <link>https://daltonmatos.com/2015/05/convertendo-intel-hex-para-elf32-avr-criando-tabela-de-simbolos-e-tabela-de-realocacao/</link>
      <pubDate>Sun, 03 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2015/05/convertendo-intel-hex-para-elf32-avr-criando-tabela-de-simbolos-e-tabela-de-realocacao/</guid>
      <description>Esse post faz parte de uma série de posts sobre mistura de código C (avr-gcc) com código Assembly (AVRASM2). Se você ainda não leu os posts anteriores, recomendo que leia antes de prosseguir.
Contexto No post anterior vimos que é possível chamar código assembly (feito com AVRASM2) a partir de codigo C (avr-gcc). Vimos também que existem algumas limitaçoes na estratégia usada, tivemos que ajustar a instrução .org e isso significa que tínhamos que ajustar o código assembly toda vez que adicionávamos mais código C.</description>
    </item>
    
    <item>
      <title>Chamando código Assembly legado (AVRASM2) a partir de um código novo em C (avr-gcc)</title>
      <link>https://daltonmatos.com/2015/04/chamando-codigo-assembly-legado-avrasm2-a-partir-de-um-codigo-novo-em-c-avr-gcc/</link>
      <pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/2015/04/chamando-codigo-assembly-legado-avrasm2-a-partir-de-um-codigo-novo-em-c-avr-gcc/</guid>
      <description>Contexto Todos os tutoriais que encontrei na internet que falam sobre mistura de C e ASM em um mesmo projeto ensinam a fazer da mesma forma, que é usando avr-gcc. O problema comum em todos eles é que assumem que você está começando um projeto do zero. Isso significa que o código assembly deve estar na sintaxe que o avr-as (GNU Assembler) espera encontrar. Quando me refiro a &amp;ldquo;código legado&amp;rdquo; estou falando de Assembly feito no AVR Studio, usando o AVRASM2 como Assembler.</description>
    </item>
    
    <item>
      <title>Misturando código do avrasm2 com código do avr-gcc: Uma prova de conceito</title>
      <link>https://daltonmatos.com/avr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://daltonmatos.com/avr/</guid>
      <description>Abaixo você encontra uma pesquisa que fiz onde mostro, na prática, como mesclar código de um projeto puramente Assembly (feito com avrasm2 e que gera apenas um arquivo Intel Hex) com um projeto Moderno C (feito com avr-gcc) que pode fazer uso de conceitos mais avançados como realocação de código, tabela de símbolos, link-edição e outros.
A pesquisa é dividia em 4 posts, onde avanço gradualmente resolvendo os problemas que encontrei pelo caminho.</description>
    </item>
    
  </channel>
</rss>